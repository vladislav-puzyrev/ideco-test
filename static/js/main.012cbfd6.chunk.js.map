{"version":3,"sources":["components/App.module.css","redux/tasks-reducer.ts","hooks/useSetTitle.ts","components/Table/TasksTable.tsx","components/AddTaskForm/AddTaskForm.tsx","components/SearchForm/SearchForm.tsx","components/App.tsx","serviceWorker.ts","redux/store.ts","index.tsx","components/SearchForm/SearchForm.module.css","components/AddTaskForm/AddTaskForm.module.css"],"names":["module","exports","SET_TODOS","SET_USERS","DELETE_TODO","SET_TODO_TITLE","ADD_TODO","initialState","todos","undefined","users","setTodos","type","setUsers","tasksReducer","state","action","filter","todo","id","map","completed","title","value","userId","length","useSetTitle","useEffect","document","React","memo","rows","searchString","completedMode","dispatch","useDispatch","userID","useParams","userTodos","row","includes","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","scope","Tooltip","IconButton","onClick","Button","to","userName","TextField","onChange","e","target","fullWidth","MyTextInput","label","props","useField","field","meta","className","s","wrapper","touched","error","MySelect","Select","user","MenuItem","username","initialValues","validationSchema","Yup","max","required","onSubmit","values","find","form","name","variant","color","MyRadioButton","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","SearchForm","setSearchString","setCompletedMode","completedFind","search","style","marginLeft","App","useSelector","tasks","reverse","a","axios","get","res","data","useState","page","header","textDecoration","role","main","exact","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.012cbfd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3_bdU\",\"main\":\"App_main__1jNll\"};","import axios from 'axios'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { RootReducerType } from './store'\r\nimport { ITodo, IUser } from '../types/types'\r\n\r\n/* Action types */\r\nconst SET_TODOS = 'ideco-test/tasks/SET_TODOS'\r\nconst SET_USERS = 'ideco-test/tasks/SET_USERS'\r\nconst DELETE_TODO = 'ideco-test/tasks/DELETE_TODO'\r\nconst TOGGLE_TODO_COMPLETED = 'ideco-test/tasks/TOGGLE_TODO_COMPLETED'\r\nconst SET_TODO_TITLE = 'ideco-test/tasks/SET_TODO_TITLE'\r\nconst ADD_TODO = 'ideco-test/tasks/ADD_TODO'\r\n\r\nconst initialState = {\r\n  todos: undefined as Array<ITodo> | undefined,\r\n  users: undefined as Array<IUser> | undefined,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  setTodosType |\r\n  setUsersType |\r\n  deleteTodoType |\r\n  toggleTodoCompletedType |\r\n  setTodoTitleType |\r\n  addTodoType\r\n\r\nfunction tasksReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_TODOS:\r\n      return {\r\n        ...state,\r\n        todos: action.todos\r\n      }\r\n\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n\r\n    case DELETE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos?.filter(todo => todo.id !== action.id)\r\n      }\r\n\r\n    case TOGGLE_TODO_COMPLETED:\r\n      return {\r\n        ...state,\r\n        todos: state.todos?.map(todo => ({\r\n          ...todo,\r\n          completed: todo.id === action.id ? !todo.completed : todo.completed\r\n        }))\r\n      }\r\n\r\n    case SET_TODO_TITLE:\r\n      return {\r\n        ...state,\r\n        todos: state.todos?.map(todo => ({\r\n          ...todo,\r\n          title: todo.id === action.id ? action.value : todo.title\r\n        }))\r\n      }\r\n\r\n    case ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todos: [\r\n          // @ts-ignore\r\n          ...state.todos,\r\n          {\r\n            userId: action.userId,\r\n            id: state.todos?.length && state.todos.length + 1,\r\n            title: action.title,\r\n            completed: false,\r\n          }\r\n        ]\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype setTodosType = { type: typeof SET_TODOS, todos: Array<ITodo> }\r\nexport const setTodos = (todos: Array<ITodo>): setTodosType => ({\r\n  type: SET_TODOS,\r\n  todos,\r\n})\r\n\r\ntype setUsersType = { type: typeof SET_USERS, users: Array<IUser> }\r\nexport const setUsers = (users: Array<IUser>): setUsersType => ({\r\n  type: SET_USERS,\r\n  users,\r\n})\r\n\r\ntype deleteTodoType = { type: typeof DELETE_TODO, id: number }\r\nexport const deleteTodo = (id: number): deleteTodoType => ({\r\n  type: DELETE_TODO,\r\n  id,\r\n})\r\n\r\ntype toggleTodoCompletedType = { type: typeof TOGGLE_TODO_COMPLETED, id: number }\r\nexport const toggleTodoCompleted = (id: number): toggleTodoCompletedType => ({\r\n  type: TOGGLE_TODO_COMPLETED,\r\n  id,\r\n})\r\n\r\ntype setTodoTitleType = { type: typeof SET_TODO_TITLE, id: number, value: string }\r\nexport const setTodoTitle = (id: number, value: string): setTodoTitleType => ({\r\n  type: SET_TODO_TITLE,\r\n  id,\r\n  value\r\n})\r\n\r\ntype addTodoType = { type: typeof ADD_TODO, title: string, userId: number | undefined }\r\nexport const addTodo = (title: string, userId: number | undefined): addTodoType => ({\r\n  type: ADD_TODO,\r\n  title,\r\n  userId\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, RootReducerType, unknown, ActionTypes>\r\n\r\nexport const getTodos = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const res = await axios.get('http://jsonplaceholder.typicode.com/todos')\r\n    const todos = res.data\r\n    dispatch(setTodos(todos))\r\n  }\r\n}\r\n\r\nexport const getUsers = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const res = await axios.get('http://jsonplaceholder.typicode.com/users')\r\n    const users = res.data\r\n    dispatch(setUsers(users))\r\n  }\r\n}\r\n\r\nexport default tasksReducer\r\n","import { useEffect } from 'react'\r\n\r\nfunction useSetTitle (title: string | null) {\r\n  useEffect(() => {\r\n    if (title) {\r\n      document.title = title\r\n    }\r\n  }, [title])\r\n}\r\n\r\nexport default useSetTitle\r\n","import React, { useEffect } from 'react'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { ITodo } from '../../types/types'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Tooltip, IconButton, Button, TextField } from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { deleteTodo, toggleTodoCompleted, setTodoTitle } from '../../redux/tasks-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useSetTitle from '../../hooks/useSetTitle'\r\n\r\ninterface ITodoWithUserName extends ITodo {\r\n  userName: string | undefined\r\n}\r\n\r\ninterface IProps {\r\n  rows: Array<ITodoWithUserName> | undefined\r\n  completedMode: 'Выполненная' | 'Не выполненная' | 'Любая'\r\n  searchString: string | null\r\n}\r\n\r\nconst TasksTable: React.FC<IProps> = ({ rows, searchString, completedMode }) => {\r\n  const dispatch = useDispatch()\r\n  const { userID } = useParams()\r\n  let userTodos = rows\r\n\r\n  if (userID && rows) {\r\n    userTodos = rows.filter(row => row.userId === +userID)\r\n  }\r\n\r\n  if (searchString) {\r\n    userTodos = userTodos?.filter(row => row.title.includes(searchString))\r\n  }\r\n\r\n  if (completedMode === 'Выполненная') {\r\n    userTodos = userTodos?.filter(row => row.completed)\r\n  }\r\n\r\n  if (completedMode === 'Не выполненная') {\r\n    userTodos = userTodos?.filter(row => !row.completed)\r\n  }\r\n\r\n  useSetTitle(userTodos ? `Всего задач - ${userTodos.length}` : null)\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Статус</TableCell>\r\n            <TableCell align=\"left\">Исполнитель задачи</TableCell>\r\n            <TableCell align=\"left\">Название задачи</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            userTodos?.map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  <Tooltip title=\"Delete\">\r\n                    <IconButton onClick={() => {dispatch(deleteTodo(row.id))}} aria-label=\"delete\">\r\n                      <DeleteIcon/>\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Button onClick={() => {dispatch(toggleTodoCompleted(row.id))}}>\r\n                    {row.completed ? 'выполнено' : 'не выполнено'}\r\n                  </Button>\r\n                </TableCell>\r\n                <TableCell align=\"left\"><NavLink to={`/${row.userId}`}>{row.userName}</NavLink></TableCell>\r\n                <TableCell align=\"left\">\r\n                  <TextField\r\n                    onChange={(e) => {dispatch(setTodoTitle(row.id, e.target.value))}}\r\n                    value={row.title}\r\n                    fullWidth/>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n}\r\n\r\nexport default React.memo(TasksTable)\r\n","import React from 'react'\r\nimport { IUser } from '../../types/types'\r\nimport { Formik, Form, useField } from 'formik'\r\nimport { Button, TextField, Select, MenuItem } from '@material-ui/core'\r\nimport s from './AddTaskForm.module.css'\r\nimport * as Yup from 'yup'\r\nimport { addTodo } from '../../redux/tasks-reducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst MyTextInput = ({ label, ...props }: any) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <TextField fullWidth label=\"Название задачи\" {...field} {...props}/>\r\n      {meta.touched && meta.error && <div className={s.error}>{meta.error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst MySelect = ({ label, ...props }: any) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <Select fullWidth {...field} {...props}>\r\n        {props.users?.map((user: any) => (\r\n          <MenuItem key={user.id} value={user.username}>{user.username}</MenuItem>\r\n        ))}\r\n      </Select>\r\n      {meta.touched && meta.error && <div className={s.error}>{meta.error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface IProps {\r\n  users: Array<IUser> | undefined\r\n}\r\n\r\nconst AddTaskForm: React.FC<IProps> = ({ users }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        title: '',\r\n        user: '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        title: Yup.string()\r\n          .max(15, 'Максимум 15 символов')\r\n          .required('Название обязательно'),\r\n        user: Yup.string().required('Пользователь обязателен'),\r\n      })}\r\n      onSubmit={(values) => {\r\n        dispatch(addTodo(\r\n          values.title,\r\n          users?.find(user => user.username === values.user)?.id\r\n        ))\r\n      }}\r\n    >\r\n      <Form>\r\n        <div className={s.form}>\r\n          <MyTextInput\r\n            name=\"title\"\r\n          />\r\n          <MySelect\r\n            name=\"user\"\r\n            users={users}\r\n          />\r\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">Создать задачу</Button>\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default React.memo(AddTaskForm)\r\n","import React from 'react'\r\nimport { IUser } from '../../types/types'\r\nimport { Formik, Form, useField } from 'formik'\r\nimport {\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  FormLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio\r\n} from '@material-ui/core'\r\nimport s from './SearchForm.module.css'\r\nimport * as Yup from 'yup'\r\n\r\nconst MyTextInput = ({ label, ...props }: any) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <TextField fullWidth label=\"Название задачи\" {...field} {...props}/>\r\n      {meta.touched && meta.error && <div className={s.error}>{meta.error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst MyRadioButton = ({ label, ...props }: any) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Прогресс задачи</FormLabel>\r\n        <RadioGroup aria-label=\"gender\" name=\"gender1\" onChange={() => {}}>\r\n          <FormControlLabel {...field} {...props} value=\"Выполненная\" control={<Radio/>} label=\"Выполненная\"/>\r\n          <FormControlLabel {...field} {...props} value=\"Не выполненная\" control={<Radio/>} label=\"Не выплненная\"/>\r\n          <FormControlLabel {...field} {...props} value=\"Любая\" control={<Radio/>} label=\"Любая\"/>\r\n        </RadioGroup>\r\n      </FormControl>\r\n      {meta.touched && meta.error && <div className={s.error}>{meta.error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface IProps {\r\n  users: Array<IUser> | undefined\r\n  setSearchString: (string: string | null) => void\r\n  setCompletedMode: (string: 'Выполненная' | 'Не выполненная' | 'Любая') => void\r\n}\r\n\r\nconst SearchForm: React.FC<IProps> = ({ users, setSearchString, setCompletedMode }) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        searchString: '',\r\n        completedFind: '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        searchString: Yup.string()\r\n          .max(15, 'Максимум 15 символов')\r\n          .required('Название обязательно'),\r\n        completedFind: Yup.string().required('Выбор обязателен'),\r\n      })}\r\n      onSubmit={(values) => {\r\n        setSearchString(values.searchString)\r\n        // @ts-ignore\r\n        setCompletedMode(values.completedFind)\r\n      }}\r\n    >\r\n      <Form>\r\n        <div className={s.form}>\r\n          <MyRadioButton\r\n            name=\"completedFind\"\r\n            users={users}\r\n          />\r\n          <div className={s.search}>\r\n            <MyTextInput\r\n              name=\"searchString\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">Найти</Button>\r\n            <Button style={{marginLeft: '20px'}} onClick={() => {\r\n              setSearchString(null)\r\n              setCompletedMode('Любая')\r\n            }} variant=\"contained\" color=\"primary\" type=\"button\">Сброс</Button>\r\n          </div>\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default SearchForm\r\n","import React, { useEffect, useState } from 'react'\nimport s from './App.module.css'\nimport TasksTable from './Table/TasksTable'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootReducerType } from '../redux/store'\nimport { getUsers, getTodos } from '../redux/tasks-reducer'\nimport { NavLink, Route } from 'react-router-dom'\nimport AddTaskForm from './AddTaskForm/AddTaskForm'\nimport SearchForm from './SearchForm/SearchForm'\n\nfunction App () {\n  const dispatch = useDispatch()\n\n  const users = useSelector((state: RootReducerType) => state.tasks.users)\n  const todos = useSelector((state: RootReducerType) => {\n    return state.tasks.todos?.map(todo => {\n      return {\n        ...todo,\n        userName: state.tasks.users?.find(user => user.id === todo.userId)?.username\n      }\n    })\n  })?.reverse()\n\n  useEffect(() => {\n    dispatch(getUsers())\n    dispatch(getTodos())\n  }, [dispatch])\n\n  const [searchString, setSearchString] = useState<string | null>(null)\n  const [completedMode, setCompletedMode] = useState<'Выполненная' | 'Не выполненная' | 'Любая'>('Любая')\n\n  return (\n    <div className={s.page}>\n      <header className={s.header}>\n        <NavLink to=\"/\" style={{ color: 'inherit', textDecoration: 'none' }}>\n          Ideco - Список дел <span role=\"img\" aria-label=\"Смайлик улыбки\">🙂</span>\n        </NavLink>\n      </header>\n\n      <main className={s.main}>\n        <SearchForm users={users} setSearchString={setSearchString} setCompletedMode={setCompletedMode}/>\n        <AddTaskForm users={users}/>\n        <Route exact path='/:userID?' render={\n          () => <TasksTable rows={todos} searchString={searchString} completedMode={completedMode}/>\n        }/>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport tasksReducer from './tasks-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer\r\n})\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SearchForm_form__gTQBK\",\"wrapper\":\"SearchForm_wrapper__3BgnR\",\"error\":\"SearchForm_error__RYII3\",\"search\":\"SearchForm_search__i6KeZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddTaskForm_form__1PL3K\",\"wrapper\":\"AddTaskForm_wrapper__2gpza\",\"error\":\"AddTaskForm_error__1RAFw\"};"],"sourceRoot":""}